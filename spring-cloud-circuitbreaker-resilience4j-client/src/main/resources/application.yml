server:
  port: 8080

spring:
  application:
    name: resilience-client
  main:
    lazy-initialization: true
   
eureka:
  instance:
    lease-renewal-interval-in-seconds: 10   # DO NOT DO THIS IN PRODUCTION
  client:
    registerWithEureka: false  
    serviceUrl:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}
      


#resilience4j.circuitbreaker:    ## Use this sample for sharing common props
#    configs:
#        default:
#            slidingWindowSize: 100
#            permittedNumberOfCallsInHalfOpenState: 10
#            waitDurationInOpenState: 10000
#            failureRateThreshold: 60
#            eventConsumerBufferSize: 10
#            registerHealthIndicator: true
#        someShared:
#            slidingWindowSize: 50
#            permittedNumberOfCallsInHalfOpenState: 10
#    instances:
#        backendA:
#            baseConfig: default
#            waitDurationInOpenState: 5000
#        backendB:
#            baseConfig: someShared


resilience4j.circuitbreaker:
    instances:
#        backendA:
#            registerHealthIndicator: true
#            slidingWindowSize: 100
        backendB:
            registerHealthIndicator: true
            slidingWindowSize: 10
            permittedNumberOfCallsInHalfOpenState: 3
            slidingWindowType: TIME_BASED
            minimumNumberOfCalls: 20
            waitDurationInOpenState: 50s
            failureRateThreshold: 50
            eventConsumerBufferSize: 10
#            recordFailurePredicate: io.github.robwin.exception.RecordFailurePredicate
            
#resilience4j.retry:
#    instances:
#        backendA:
#            maxAttempts: 3
#            waitDuration: 10s
#            enableExponentialBackoff: true
#            exponentialBackoffMultiplier: 2
#            retryExceptions:
#                - org.springframework.web.client.HttpServerErrorException
#                - java.io.IOException
#            ignoreExceptions:
#                - io.github.robwin.exception.BusinessException
#        backendB:
#            maxAttempts: 3
#            waitDuration: 10s
#            retryExceptions:
#                - org.springframework.web.client.HttpServerErrorException
#                - java.io.IOException
#            ignoreExceptions:
#                - io.github.robwin.exception.BusinessException
#                
#resilience4j.bulkhead:
#    instances:
#        backendA:
#            maxConcurrentCalls: 10
#        backendB:
#            maxWaitDuration: 10ms
#            maxConcurrentCalls: 20
#            
#resilience4j.thread-pool-bulkhead:
#  instances:
#    backendC:
#      maxThreadPoolSize: 1
#      coreThreadPoolSize: 1
#      queueCapacity: 1
#        
#resilience4j.ratelimiter:
#    instances:
#        backendA:
#            limitForPeriod: 10
#            limitRefreshPeriod: 1s
#            timeoutDuration: 0
#            registerHealthIndicator: true
#            eventConsumerBufferSize: 100
#        backendB:
#            limitForPeriod: 6
#            limitRefreshPeriod: 500ms
#            timeoutDuration: 3s
#            
#resilience4j.timelimiter:
#    instances:
#        backendA:
#            timeoutDuration: 2s
#            cancelRunningFuture: true
#        backendB:
#            timeoutDuration: 1s
#            cancelRunningFuture: false            